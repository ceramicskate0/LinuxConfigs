filter {
  if [infralogtype] == "redirhaproxy" {
    # drop haproxy log lines about the service starting and stopping
    if "haproxy-systemd-wrapper" in [message] {
      drop { }
    }
    if "Proxy " in [message] and " started." in [message] {
      drop { }
    }
    # drop haproxy log lines when there is a config error
    if " [ALERT] " in [message] {
       drop { }
    }
    if " [ SSL] " in [message] {
       drop { }
    }
    if " [ ALL] " in [message] {
       drop { }
    }
    if " [UNIX] " in [message] {
       drop { }
    }
    if " [STAT] " in [message] {
       drop { }
    }
    if " [ TCP] " in [message] {
       drop { }
    }
    
    # match lines from the haproxy log, like: Apr 18 16:36:09 $HOST haproxy[1153]: frontend:www-http/$HOST/$SOMEIP:80 backend:cobaltstrike client:$SOMEIP:3872 GMT:18/Apr/2018:14:36:08 +0000 body:- request:GET $SOMEURI HTTP/1.1 
    # Sometimes HAproxy will report an SSL handshake failure, using a different log line. We check for that as well
    if "SSL handshake failure" in [message] {
      grok {
#        match => { "message" => [ "%{SYSLOGTIMESTAMP} %{IPORHOST:redir_host} %{SYSLOGPROG}: [%{IPORHOST:src_ip}:%{POSINT:src_port} [(?<haproxy_timestamp>%{MONTHDAY}\/%{MONTH}\/%{YEAR}:%{TIME})] (?<haproxy_frontend>([^/]*))%{GREEDYDATA:haproxy_request}" ] }
        match => { "message"=> [ "%{SYSLOGTIMESTAMP} %{IPORHOST:redir_host} %{SYSLOGPROG}: %{IPORHOST:src_ip}:%{POSINT:src_port} \[(?<haproxy_timestamp>%{MONTHDAY}\/%{MONTH}\/%{YEAR}:%{TIME})] (?<haproxy_frontend>([^/]*))%{GREEDYDATA:haproxy_request}" ] }
      }
      mutate {
        add_field => { "haproxy_dest" => "ssl-error" }
      }
      # Set the timestamp from the log to @timestamp, example: 16/Sep/2018:07:08:21.783
      date {
        match => [ "haproxy_timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS" ]
        target => "@timestamp"
        timezone => "Etc/GMT"
      }
    } else {
      # now matching the real haproxy lines. We have several log line formats we need to match:
      # - Lines with 'message repeated X times'
      # - normal line, looks like 'Sep 28 09:15:33 $HOSTNAME  haproxy[442]: frontend:www-https/$HOSTNAME/$SOMEIP:443 backend:cobaltstrike client:$SOMEIP:51809 GMT:28/Sep/2018:07:15:33 +0000 body:- request:GET $SOMEURI HTTP/1.1
      # - Cutoff line as log line is longer than our logging buffer    
      grok {
        match => { "message" => [ "%{SYSLOGTIMESTAMP} %{IPORHOST:redir_host} %{SYSLOGPROG}: message repeated %{NUMBER} times: \[ frontend:(?<haproxy_frontend>([^/]*))/(([^/]*))/%{IPORHOST:dst_ip}:%{POSINT:dst_port} backend:%{NOTSPACE:haproxy_dest} client:%{IPORHOST:src_ip}:%{POSINT:src_port} GMT:%{HTTPDATE:haproxy_timestamp} useragent:(?<haproxy_useragent>(.*)) body:(?<haproxy_body>(.*)) request:%{GREEDYDATA:haproxy_request}\]" , "%{SYSLOGTIMESTAMP} %{IPORHOST:redir_host} %{SYSLOGPROG}: frontend:(?<haproxy_frontend>([^/]*))/(([^/]*))/%{IPORHOST:dst_ip}:%{POSINT:dst_port} backend:%{NOTSPACE:haproxy_dest} client:%{IPORHOST:src_ip}:%{POSINT:src_port} GMT:%{HTTPDATE:haproxy_timestamp} useragent:(?<haproxy_useragent>(.*)) body:(?<haproxy_body>(.*)) request:%{GREEDYDATA:haproxy_request}" , "%{SYSLOGTIMESTAMP} %{IPORHOST:redir_host} %{SYSLOGPROG}: frontend:(?<haproxy_frontend>([^/]*))/(([^/]*))/%{IPORHOST:dst_ip}:%{POSINT:dst_port} backend:%{NOTSPACE:haproxy_dest} client:%{IPORHOST:src_ip}:%{POSINT:src_port} GMT:%{HTTPDATE:haproxy_timestamp} body:%{GREEDYDATA:haproxy_body}" ] }
      }
      # Set the timestamp from the log to @timestamp, example: 15/Apr/2018:19:22:31 +0000
      date {
        match => [ "haproxy_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        target => "@timestamp"
        timezone => "Etc/GMT"
      }
    }

    # When IPv6 is enabled on your HAProxy host, IPV4 addresses are reported like ::ffff:ipv4address. Here we cut off the ::ffff: part
    if "ffff" in [src_ip] {
      mutate {
        gsub => [
          "src_ip", "\:\:ffff\:", "",
          "dst_ip", "\:\:ffff\:", ""
        ]
      }
    }

    # Add data to the src_ip
    if [src_ip] {
      # duplicate field so we can replace it with reverse DNS lookup
      mutate {
        add_field => { "src_dns" => "%{src_ip}" }
      }
      # do reverse DNS lookup
      dns {
        reverse => ["src_dns"]
        action => "replace"
        timeout => "2.0"
      }
      # add geo ip info from City DB
      geoip {
        source => "src_ip"
        database => "/usr/share/logstash/GeoLite2-dbs/GeoLite2-City.mmdb"
      }
      # add geo ip info from ASN DB
      geoip { 
        source => "src_ip" 
        default_database_type => "ASN"
        database => "/usr/share/logstash/GeoLite2-dbs/GeoLite2-ASN.mmdb"
      }
    }
  }
}

output {
  if [infralogtype] == "redirhaproxy" {
    elasticsearch{
      hosts => ["127.0.0.1:9200"]
      sniffing => true
      manage_template => false
      index => "redirhaproxy-%{+YYYY.MM.dd}"
    }
    #stdout { codec => rubydebug }
    #file {
    #  path => "/tmp/logstashout.txt"
    #}
  } 
}
