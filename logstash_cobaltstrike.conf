input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/etc/logstash/certs/elkserver.crt"
    ssl_key => "/etc/logstash/certs/elkserver.key"
    client_inactivity_timeout => 7200
    ssl_handshake_timeout => 30000
  }
}

filter {
  if [cslogtype] == "events" {
    # Get the timestamp from the log line, and get the rest of the log line
    grok {
      match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{HOUR}\:%{MINUTE}) %{GREEDYDATA:csmessage}" }
    }

    # Set the timestamp from the log to @timestamp
    date {
        match => [ "cstimestamp", "MM/dd HH:mm" ]
        target => "@timestamp"
        timezone => "Europe/Amsterdam"
    }

    # matching lines like: *** initial beacon from username@ip (hostname)  
    if " initial beacon from " in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "events_newbeacon" }
      }

      grok {
        match => { "csmessage" => "((/*** initial beacon from)) (?<target_user>([^@]*))\@%{IPORHOST:target_ipint} \((?<target_hostname>([^)]*))" }
      }
    }

    # matching lines like: *** user joined
    if " joined" in [csmessage] or " quit" in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "events_joinleave" }
      }
    }
  }

  if [cslogtype] == "beacon" {
    # Get the timestamp from the log line, and get the rest of the log line
    grok {
      match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) %{GREEDYDATA:csmessage}" }
    }

    # Set the timestamp from the log to @timestamp
    date {
        match => [ "cstimestamp", "MM/dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Europe/Amsterdam"
    }

    # Add path/URI value to the full beacon.log file
    ruby {
      path => "/etc/logstash/ruby-scripts/makebeaconlogpath.rb"
    }

    # Set the beacon id from the file name
    # Need to match for 2 different occurence, one where the IP address is known based on the file name, and one where it states 'unknown'.
    # It is expected that the logs are in the default subdirectory of the folder cobaltstrike: /cobaltstrike/logs/
    grok {
      match => { "source" => [ "/cobaltstrike/logs/((\d{6}))/%{IPORHOST:target_ipint}/beacon_(?<beacon_id>(\d{1,5}))", "/cobaltstrike/logs/((\d{6}))/unknown/beacon_(?<beacon_id>(\d{0,5}))" ] }
    }

    # matching lines like: [metadata] 1.2.3.4 <- 10.10.10.10; computer: SomeComputername; user: SomeUsername; pid: 7368; os: Windows; version: 6.1; beacon arch: x86
    # todo: this could go wrong if targetip is not an ip but a smb beacon (can list the beacon session id instead of ip address..? In such case also set the beacon_smb value to true
    if "[metadata] " in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "beacon_newbeacon" }
      }
      # need to match 2 types of lines, one for regular HTTP(S) beacon where the ext IP field is an IP, and one for SMB beacons where the ext IP field is a field like "beacon_12345"
      grok {
        match => { "csmessage" => [ "(([^\s]*)) %{IPORHOST:target_ipext} (([^\s]*)) %{IPORHOST}((\; computer:)) (?<target_hostname>([^\;]*))((\; user:)) (?<target_user>([^\;]*))((\; pid:)) (?<target_pid>([^\;]*))((\; os:)) (?<target_os>([^\;]*))((\; version:)) (?<target_osversion>([^\;]*))((\; beacon arch:)) (?<beacon_arch>([^\;]*))","(([^\s]*)) ((beacon_))(?<beacon_smbparentid>(\d{1,5})) (([^\s]*)) %{IPORHOST}((\; computer:)) (?<target_hostname>([^\;]*))((\; user:)) (?<target_user>([^\;]*))((\; pid:)) (?<target_pid>([^\;]*))((\; os:)) (?<target_os>([^\;]*))((\; version:)) (?<target_osversion>([^\;]*))((\; beacon arch:)) (?<beacon_arch>([^\;]*))" ] }
      }
      # now duplicate this specific log line, remove some irrelevant fields and make it ready to store in the beaconDB index (different output)
      clone {
        clones => [ "beacondb" ]
        #remove_field => [ "cstimestamp","[beat][hostname]","[beat][name]","[beat][version]","beat","cslogtype","csmessage","host","infralogtype","[prospector][type]" ]
        remove_field => [ "cslogtype","csmessage","host","infralogtype" ]
      }
    } 

   # matching lines like: [task] Tasked beacon to sleep for 3600s (20% jitter)
   if "[task] " in [csmessage] {
     mutate { 
       replace  => { "cslogtype" => "beacon_task" }
     }

     grok {
       match => { "csmessage" => "(([^\s]*)) %{GREEDYDATA:beacon_task}" }
     }
   }

   # matching lines like: [checkin] host called home, sent: 16 bytes
   if "[checkin] " in [csmessage] {
     mutate {
       replace  => { "cslogtype" => "beacon_checkin" }
     }

     grok {
       match => { "csmessage" => "(([^\s]*)) %{GREEDYDATA:beacon_checkin}" }
     }
   }

   # matching lines like: [input] <Operator> note s3600 20
   if "[input] " in [csmessage] {
     mutate {
       replace  => { "cslogtype" => "beacon_input" }
     }

     grok {
       match => { "csmessage" => "(([^\s]*)) %{GREEDYDATA:beacon_input}" }
     }
   }

   # matching lines like: [indicator] SomethingSomething
   if "[indicator]" in [csmessage] {
     mutate {
       replace => { "cslogtype" => "ioc" }
     }

     # need to match 2 types of lines: one for file and one for service indicators
     grok {
       match => { "csmessage" => [ "((^\[indicator\])) (?<ioc_type>([^\:]*))((:)) %{NOTSPACE:ioc_hash} %{POSINT:ioc_bytesize} ((bytes)) %{GREEDYDATA:ioc_name}","((^\[indicator\])) (?<ioc_type>([^\:]*))((:)) %{WINPATH:ioc_path} %{NOTSPACE:ioc_name}" ] }
     }
   }

   # matching lines like: [output]\nSomethingSomething
   if "[output]" in [csmessage] {
     mutate {
       replace  => { "cslogtype" => "beacon_output" }
     }

     grok {
       match => { "csmessage" => "]\n%{GREEDYDATA:beacon_output}" }
     }

     # check for messages like: established link to parent beacon: 1.2.3.4
     # we will set the target_ipext to 1.2.3.4 and add a fields indicating its a SMB beacon now
     # todo: add check for the 'mode smb' command, and add check for recursive smb beacons (child becomes another beacon's parent)
     if "established link to parent beacon" in [beacon_output] {
       grok {
         match => { "beacon_output" => "((established link to parent beacon: ))%{IPORHOST:target_smbparentnode}" }
         add_field => { "beacon_smb" => "true" }
         add_field => { "beacon_smbmode" => "child" }
       }
     }
     if "established link to child beacon" in [beacon_output] {
       grok {
         match => { "beacon_output" => "((established link to child beacon: ))%{IPORHOST:target_smbchildnode}" }
         add_field => { "beacon_smb" => "true" }
         add_field => { "beacon_smbmode" => "parent" }
       }
     }

     # check for received screenshots and add a path value to the screenshot
     if "received screenshot (" in [beacon_output] {
       ruby {
         path => "/etc/logstash/ruby-scripts/makescreenshotpath.rb"
       }
     }
   }


   # matching lines like: [error]\nSomethingSomething
   if "[error]" in [csmessage] {
     mutate {
       replace  => { "cslogtype" => "beacon_error" }
     }

     grok {
       match => { "csmessage" => "]%{GREEDYDATA:beacon_output}" }
     }
   }  
  }

  if [cslogtype] == "keystrokes" {
    # Get the timestamp from the log line, and get the rest of the log line
    grok {
      match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) %{GREEDYDATA:csmessage}" }
    }

    # Set the timestamp from the log to @timestamp
    date {
        match => [ "cstimestamp", "MM/dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Europe/Amsterdam"
    }

    # Set the beacon id from the file name
    # Need to match for 2 different occurence, one where the IP address is known based on the file name, and one where it states 'unknown'.
    # It is expected that the logs are in the default subdirectory of the folder cobaltstrike: /cobaltstrike/logs/
    grok {
      match => { "source" => [ "/cobaltstrike/logs/((\d{6}))/%{IPORHOST:target_ipint}/keystrokes/keystrokes_(?<beacon_id>(\d{1,5}))", "/cobaltstrike/logs/((\d{6}))/unknown/keystrokes/keystrokes_(?<beacon_id>(\d{0,5}))" ] }
    }

    # add url to full keystrokes file  
    ruby {
      path => "/etc/logstash/ruby-scripts/makekeystrokespath.rb"
    }
  }
}

output {
  if [infralogtype] == "rtops" {
    elasticsearch {
      hosts => ["127.0.0.1:9200"]
      sniffing => true
      manage_template => false 
      index => "%{[infralogtype]}-%{+YYYY.MM.dd}"
    }
  }
  #stdout { codec => rubydebug }
  #file {
  #  path => "/tmp/logstashout.txt"
  #}
  #}
  if [type] == "beacondb" {
    elasticsearch {
      hosts => ["127.0.0.1:9200"]
      sniffing => true
      manage_template => false
      index => "beacondb"
    }
  #  file {
  #    path => "/tmp/logstashout.txt"
  # }
  }
}
